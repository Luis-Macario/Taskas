openapi: 3.0.1
info:
  description: Simple Task Management API
  version: "0.1.0"
  title: Task Management API
  license:
    name: GNU Affero General Public License 3.0
    url: 'https://www.gnu.org/licenses/agpl-3.0.en.html'

servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/RicardoPinto26/TaskManagementApp/0.1.0
  - description: localhost
    url: http://localhost:8080/api

tags:
  - name: User Management
  - name: Board Management
  - name: List Management
  - name: Card Management

paths:
  /users:
    post:
      tags:
        - User Management
      summary: creates a new user
      description: |
        Create a user, given a name and email.
      requestBody:
        description: User object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'

      responses:
        '201':
          description: User was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'
        '400':
          description: Invalid Request Body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '409':
          description: Provided email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'

  /users/{userID}:
    get:
      tags:
        - User Management
      summary: get the details of a user
      description: |
        Get the name and email of a user
      parameters:
        - name: userID
          in: path
          description: The user's id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The user's details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid ID provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'

  /users/{userID}/boards:
    get:
      tags:
        - User Management
      summary: get all user available boards
      description: |
        Get a list of all the boards availabe to the provided user
      parameters:
        - name: userID
          in: path
          description: The user's id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The user's boards
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserBoardsResponse'
        '400':
          description: Invalid ID provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '401':
          description: User not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '403':
          description: User doesn't have access to that user's boards
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '404':
          description: No boards found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'

  /boards:
    post:
      tags:
        - Board Management
      summary: create a new board
      description: |
        Create a board, with the given name and description
      requestBody:
        description: Board object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBoardRequest'
      responses:
        '201':
          description: Board was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateBoardResponse'
        '400':
          description: Invalid Request Body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '401':
          description: User not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '409':
          description: Provided name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'

  /boards/{boardID}:
    get:
      tags:
        - Board Management
      summary: Gets the details of a given board
      description: |
        Create a board, with the given name and description
      parameters:
        - name: boardID
          in: path
          description: The boards's id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The board's details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Board'
        '400':
          description: Invalid ID provideed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '401':
          description: User not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '403':
          description: User doesn't have access to that board
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '404':
          description: Board not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'


  /boards/{boardID}/users:
    get:
      tags:
        - Board Management
      summary: get all users
      description: |
        Get a list of all the boards availabe to the provided user
      parameters:
        - name: boardID
          in: path
          description: The board's id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBoardUsersResponse'
        '400':
          description: Invalid ID provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '401':
          description: User not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '403':
          description: User doesn't have access to that board
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
    post:
      tags:
        - Board Management
      summary: Adds a user to the given board
      description: |
        Adds the user with the provided id to the given board
      parameters:
        - name: boardID
          in: path
          description: The board's id
          required: true
          schema:
            type: integer
      requestBody:
        description: User ID
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddUserRequest'
      responses:
        '204':
          description: User was added
        '400':
          description: Invalid Board ID or Invalid Request Body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '401':
          description: User not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '403':
          description: User doesn't have access to that board
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '409':
          description: User is already in the Board
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'

  /boards/{boardID}/lists:
    get:
      tags:
        - Board Management
      summary: get all lists
      description: |
        Get a list of all the lists available in the provided group
      parameters:
        - name: boardID
          in: path
          description: The board's id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The board's lists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBoardsListsResponse'
        '400':
          description: Invalid ID provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '401':
          description: User not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '403':
          description: User doesn't have access to that board
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '404':
          description: No Lists found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'


  /lists:
    post:
      tags:
        - List Management
      summary: create a new list
      description: |
        Create a list with the given name in the given board
      requestBody:
        description: List object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateListRequest'
      responses:
        '201':
          description: List was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateListResponse'
        '400':
          description: Invalid Board ID or Invalid Request Body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '401':
          description: User not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '403':
          description: User doesn't have access to that board
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '409':
          description: A list with that name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'


  /lists/{listID}:
    get:
      tags:
        - List Management
      summary: get the details of a list
      description: |
        Get the details of the provided list
      parameters:
        - name: listID
          in: path
          description: The list's id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: the list's details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
        '400':
          description: Invalid ID provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '401':
          description: User not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '403':
          description: User doesn't have access to that board
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '404':
          description: List not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'

  /lists/{listID}/cards:
    get:
      tags:
        - List Management
      summary: get all cards
      description: |
        Get a list of all the cards available in the provided list
      parameters:
        - name: listID
          in: path
          description: The list's id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The list's cards
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetListsCardsResponse'
        '400':
          description: Invalid ID provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '401':
          description: User not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '403':
          description: User doesn't have access to that board
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '404':
          description: No Cards found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'


  /cards:
    post:
      tags:
        - Card Management
      summary: create a new card
      description: |
        Create a card in the given list
      requestBody:
        description: Card object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCardRequest'
      responses:
        '201':
          description: Card was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCardResponse'
        '400':
          description: Invalid Board ID, List ID or Invalid Request Body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '401':
          description: User not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '403':
          description: User doesn't have access to that board
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '409':
          description: A card with that name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'

  /cards/{cardID}:
    get:
      tags:
        - Card Management
      summary: get the details of a card
      description: |
        Get the details of the provided card
      parameters:
        - name: cardID
          in: path
          description: The card's id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: the card's details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        '400':
          description: Invalid ID provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '401':
          description: User not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '403':
          description: User doesn't have access to that board
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '404':
          description: Card not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'

  /cards/{cardID}/move:
    post:
      tags:
        - Card Management
      summary: move a card
      description: |
        Moves a card from the current list to the given list
      parameters:
        - name: cardID
          in: path
          description: The card's id
          required: true
          schema:
            type: integer
      requestBody:
        description: Move object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoveCardRequest'
      responses:
        '204':
          description: the card's details
        '400':
          description: Invalid ID provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '401':
          description: User not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '403':
          description: User doesn't have access to that card
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'

components:
  responses:
    InternalServerErrorResponse:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AppError'
  schemas:
    User:
      type: object
      required:
        - id
        - name
        - email
      properties:
        id:
          type: integer
          description: User's Unique Identifier
          example: 1
        name:
          type: string
          description: User's Name
          example: "Ricardo Pinto"
        email:
          type: string
          description: User's Unique Email
          example: "a47673@alunos.isel.pt"

    Board:
      type: object
      required:
        - id
        - name
        - description
      properties:
        id:
          type: integer
          description: Board's Unique Identifier
          example: 1
        name:
          type: string
          description: Board's Unique Name
          example: "aBoard"
        description:
          type: string
          description: Board's Description
          example: "aBoard's Description"

    List:
      type: object
      required:
        - id
        - name
        - boardID
      properties:
        id:
          type: integer
          description: List's Unique Identifier
          example: 1
        name:
          type: string
          description: List's Name
          example: "aList"
        boardID:
          type: integer
          description: Board's Unique Identifier
          example: 1

    Card:
      type: object
      required:
        - id
        - name
        - description
        - dueDate
        - boardID
      properties:
        id:
          type: integer
          description: Card's Unique Identifier
          example: 1
        name:
          type: string
          description: Card's Name
          example: "aCard"
        description:
          type: string
          description: Card's Description
          example: "aCard's Description"
        dueDate:
          type: string
          format: date
          description: Card's Conclusion Date
          example: "2017-07-21"
        listID:
          type: integer
          description: List's Unique Identifier
          example: 1
        boardID:
          type: integer
          description: List's Unique Identifier
          example: 1

    CreateUserRequest:
      type: object
      required:
        - name
        - email
      properties:
        name:
          type: string
          description: User's Name
          example: "Ricardo Pinto"
        email:
          type: string
          description: User's Unique Email
          example: "a47673@alunos.isel.pt"
    CreateUserResponse:
      type: object
      required:
        - token
        - id
      properties:
        token:
          type: string
          format: uuid
          description: User's Token
          example: "7d444840-9dc0-11d1-b245-5ffdce74fad2"
        id:
          type: integer
          description: User's Unique Identifier
          example: 1

    CreateBoardRequest:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
          description: Board's Unique Name
          example: "aBoard"
        description:
          type: string
          description: Board's Description
          example: "aBoard's Description"

    CreateBoardResponse:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          description: Board's Unique Identifier
          example: 1

    GetUserBoardsResponse:
      type: object
      required:
        - boards
      properties:
        lists:
          type: array
          items:
            $ref: '#/components/schemas/Board'

    GetBoardUsersResponse:
      type: object
      required:
        - users
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'

    AddUserRequest:
      type: object
      required:
        - userID
      properties:
        userID:
          type: integer
          description: The user's id
          example: 1

    CreateListRequest:
      type: object
      required:
        - boardID
        - name
      properties:
        boardID:
          type: integer
          description: Board's Unique Identifier
          example: 1
        name:
          type: string
          description: List's Unique Name
          example: "aList"
    CreateListResponse:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          description: List's Unique Identifier
          example: 1

    GetBoardsListsResponse:
      type: object
      required:
        - lists
      properties:
        lists:
          type: array
          items:
            $ref: '#/components/schemas/List'

    CreateCardRequest:
      type: object
      required:
        - listID
        - name
        - description
      properties:
        listID:
          type: integer
          description: List's ID
          example: 1
        name:
          type: string
          description: Card's Unique Name
          example: "aCard"
        description:
          type: string
          description: Card's Description
          example: "aCard's Description"
        dueDate:
          type: string
          format: date
          description: Card's Conclusion Date
          example: "2017-07-21"
    CreateCardResponse:
      type: object
      required:
        - cardID
      properties:
        cardID:
          type: integer
          description: Card's Unique Identifier
          example: 1

    GetListsCardsResponse:
      type: object
      required:
        - lists
      properties:
        lists:
          type: array
          items:
            $ref: '#/components/schemas/Card'

    MoveCardRequest:
      type: object
      required:
        - listID
      properties:
        listID:
          type: integer
          description: The List's ID where the card is to be moved into
          example: 1

    AppError:
      type: object
      required:
        - internalErrorCode
        - internalErrorName
        - description
      properties:
        internalErrorCode:
          type: integer
          description: The internal error's Code
          example: 1000
        internalErrorName:
          type: string
          description: The internal error's name
          example: "Bad Request"
        description:
          type: string
          description: A description of the error
          example: "Failed to read the request body"